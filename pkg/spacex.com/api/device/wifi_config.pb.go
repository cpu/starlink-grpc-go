// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: spacex/api/device/wifi_config.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeshAuth int32

const (
	MeshAuth_MESH_AUTH_UNKNOWN   MeshAuth = 0
	MeshAuth_MESH_AUTH_NEW       MeshAuth = 1
	MeshAuth_MESH_AUTH_TRUSTED   MeshAuth = 2
	MeshAuth_MESH_AUTH_UNTRUSTED MeshAuth = 3
)

// Enum value maps for MeshAuth.
var (
	MeshAuth_name = map[int32]string{
		0: "MESH_AUTH_UNKNOWN",
		1: "MESH_AUTH_NEW",
		2: "MESH_AUTH_TRUSTED",
		3: "MESH_AUTH_UNTRUSTED",
	}
	MeshAuth_value = map[string]int32{
		"MESH_AUTH_UNKNOWN":   0,
		"MESH_AUTH_NEW":       1,
		"MESH_AUTH_TRUSTED":   2,
		"MESH_AUTH_UNTRUSTED": 3,
	}
)

func (x MeshAuth) Enum() *MeshAuth {
	p := new(MeshAuth)
	*p = x
	return p
}

func (x MeshAuth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshAuth) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[0].Descriptor()
}

func (MeshAuth) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[0]
}

func (x MeshAuth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshAuth.Descriptor instead.
func (MeshAuth) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0}
}

type WifiConfig_Security int32

const (
	WifiConfig_UNKNOWN  WifiConfig_Security = 0
	WifiConfig_WPA2     WifiConfig_Security = 1
	WifiConfig_WPA3     WifiConfig_Security = 2
	WifiConfig_WPA2WPA3 WifiConfig_Security = 3
)

// Enum value maps for WifiConfig_Security.
var (
	WifiConfig_Security_name = map[int32]string{
		0: "UNKNOWN",
		1: "WPA2",
		2: "WPA3",
		3: "WPA2WPA3",
	}
	WifiConfig_Security_value = map[string]int32{
		"UNKNOWN":  0,
		"WPA2":     1,
		"WPA3":     2,
		"WPA2WPA3": 3,
	}
)

func (x WifiConfig_Security) Enum() *WifiConfig_Security {
	p := new(WifiConfig_Security)
	*p = x
	return p
}

func (x WifiConfig_Security) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_Security) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[1].Descriptor()
}

func (WifiConfig_Security) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[1]
}

func (x WifiConfig_Security) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_Security.Descriptor instead.
func (WifiConfig_Security) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 0}
}

type WifiConfig_Band int32

const (
	WifiConfig_RF_UNKNOWN WifiConfig_Band = 0
	WifiConfig_RF_2GHZ    WifiConfig_Band = 2
	WifiConfig_RF_5GHZ    WifiConfig_Band = 5
)

// Enum value maps for WifiConfig_Band.
var (
	WifiConfig_Band_name = map[int32]string{
		0: "RF_UNKNOWN",
		2: "RF_2GHZ",
		5: "RF_5GHZ",
	}
	WifiConfig_Band_value = map[string]int32{
		"RF_UNKNOWN": 0,
		"RF_2GHZ":    2,
		"RF_5GHZ":    5,
	}
)

func (x WifiConfig_Band) Enum() *WifiConfig_Band {
	p := new(WifiConfig_Band)
	*p = x
	return p
}

func (x WifiConfig_Band) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_Band) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[2].Descriptor()
}

func (WifiConfig_Band) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[2]
}

func (x WifiConfig_Band) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_Band.Descriptor instead.
func (WifiConfig_Band) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 1}
}

type MeshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName      string   `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ApplyDisplayName bool     `protobuf:"varint,2,opt,name=apply_display_name,json=applyDisplayName,proto3" json:"apply_display_name,omitempty"`
	Auth             MeshAuth `protobuf:"varint,3,opt,name=auth,proto3,enum=SpaceX.API.Device.MeshAuth" json:"auth,omitempty"`
}

func (x *MeshConfig) Reset() {
	*x = MeshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConfig) ProtoMessage() {}

func (x *MeshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConfig.ProtoReflect.Descriptor instead.
func (*MeshConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0}
}

func (x *MeshConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MeshConfig) GetApplyDisplayName() bool {
	if x != nil {
		return x.ApplyDisplayName
	}
	return false
}

func (x *MeshConfig) GetAuth() MeshAuth {
	if x != nil {
		return x.Auth
	}
	return MeshAuth_MESH_AUTH_UNKNOWN
}

type WifiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode        string `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	SetupComplete      bool   `protobuf:"varint,7,opt,name=setup_complete,json=setupComplete,proto3" json:"setup_complete,omitempty"`
	ApplySetupComplete bool   `protobuf:"varint,1010,opt,name=apply_setup_complete,json=applySetupComplete,proto3" json:"apply_setup_complete,omitempty"`
	Version            uint32 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	MacWan             string `protobuf:"bytes,12,opt,name=mac_wan,json=macWan,proto3" json:"mac_wan,omitempty"`
	MacLan             string `protobuf:"bytes,13,opt,name=mac_lan,json=macLan,proto3" json:"mac_lan,omitempty"`
	DeviceId           string `protobuf:"bytes,16,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Channel_2Ghz       uint32 `protobuf:"varint,19,opt,name=channel_2ghz,json=channel2ghz,proto3" json:"channel_2ghz,omitempty"`
	ApplyChannel_2Ghz  bool   `protobuf:"varint,1013,opt,name=apply_channel_2ghz,json=applyChannel2ghz,proto3" json:"apply_channel_2ghz,omitempty"`
	Channel_5Ghz       uint32 `protobuf:"varint,20,opt,name=channel_5ghz,json=channel5ghz,proto3" json:"channel_5ghz,omitempty"`
	ApplyChannel_5Ghz  bool   `protobuf:"varint,1014,opt,name=apply_channel_5ghz,json=applyChannel5ghz,proto3" json:"apply_channel_5ghz,omitempty"`
	// Deprecated: Do not use.
	MeshAuths map[string]MeshAuth `protobuf:"bytes,21,rep,name=mesh_auths,json=meshAuths,proto3" json:"mesh_auths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=SpaceX.API.Device.MeshAuth"`
	// Deprecated: Do not use.
	ApplyMeshAuths             bool                   `protobuf:"varint,1021,opt,name=apply_mesh_auths,json=applyMeshAuths,proto3" json:"apply_mesh_auths,omitempty"`
	MeshConfigs                map[string]*MeshConfig `protobuf:"bytes,33,rep,name=mesh_configs,json=meshConfigs,proto3" json:"mesh_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApplyMeshConfigs           bool                   `protobuf:"varint,1033,opt,name=apply_mesh_configs,json=applyMeshConfigs,proto3" json:"apply_mesh_configs,omitempty"`
	DynamicKeys                []*PublicKey           `protobuf:"bytes,22,rep,name=dynamic_keys,json=dynamicKeys,proto3" json:"dynamic_keys,omitempty"`
	IsRepeater                 bool                   `protobuf:"varint,23,opt,name=is_repeater,json=isRepeater,proto3" json:"is_repeater,omitempty"`
	ApplyIsRepeater            bool                   `protobuf:"varint,1031,opt,name=apply_is_repeater,json=applyIsRepeater,proto3" json:"apply_is_repeater,omitempty"`
	ExperimentsEnableMesh      bool                   `protobuf:"varint,24,opt,name=experiments_enable_mesh,json=experimentsEnableMesh,proto3" json:"experiments_enable_mesh,omitempty"`
	ApplyExperimentsEnableMesh bool                   `protobuf:"varint,1041,opt,name=apply_experiments_enable_mesh,json=applyExperimentsEnableMesh,proto3" json:"apply_experiments_enable_mesh,omitempty"`
	BootCount                  int32                  `protobuf:"varint,26,opt,name=boot_count,json=bootCount,proto3" json:"boot_count,omitempty"`
	DisableHidden              bool                   `protobuf:"varint,29,opt,name=disable_hidden,json=disableHidden,proto3" json:"disable_hidden,omitempty"`
	ApplyDisableHidden         bool                   `protobuf:"varint,1015,opt,name=apply_disable_hidden,json=applyDisableHidden,proto3" json:"apply_disable_hidden,omitempty"`
	HtBandwidth                string                 `protobuf:"bytes,2001,opt,name=ht_bandwidth,json=htBandwidth,proto3" json:"ht_bandwidth,omitempty"`
	VhtBandwidth               string                 `protobuf:"bytes,2002,opt,name=vht_bandwidth,json=vhtBandwidth,proto3" json:"vht_bandwidth,omitempty"`
	WirelessMode_2Ghz          string                 `protobuf:"bytes,2003,opt,name=wireless_mode_2ghz,json=wirelessMode2ghz,proto3" json:"wireless_mode_2ghz,omitempty"`
	WirelessMode_5Ghz          string                 `protobuf:"bytes,2004,opt,name=wireless_mode_5ghz,json=wirelessMode5ghz,proto3" json:"wireless_mode_5ghz,omitempty"`
	Boot                       *BootInfo              `protobuf:"bytes,3001,opt,name=boot,proto3" json:"boot,omitempty"`
	Nameservers                []string               `protobuf:"bytes,30,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	ApplyNameservers           bool                   `protobuf:"varint,1054,opt,name=apply_nameservers,json=applyNameservers,proto3" json:"apply_nameservers,omitempty"`
	BypassMode                 bool                   `protobuf:"varint,31,opt,name=bypass_mode,json=bypassMode,proto3" json:"bypass_mode,omitempty"`
	ApplyBypassMode            bool                   `protobuf:"varint,1055,opt,name=apply_bypass_mode,json=applyBypassMode,proto3" json:"apply_bypass_mode,omitempty"`
	Networks                   []*WifiConfig_Network  `protobuf:"bytes,1100,rep,name=networks,proto3" json:"networks,omitempty"`
	ApplyNetworks              bool                   `protobuf:"varint,1101,opt,name=apply_networks,json=applyNetworks,proto3" json:"apply_networks,omitempty"`
	NetworkName                string                 `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	ApplyNetworkName           bool                   `protobuf:"varint,1001,opt,name=apply_network_name,json=applyNetworkName,proto3" json:"apply_network_name,omitempty"`
	NetworkPassword            string                 `protobuf:"bytes,2,opt,name=network_password,json=networkPassword,proto3" json:"network_password,omitempty"`
	ApplyNetworkPassword       bool                   `protobuf:"varint,1002,opt,name=apply_network_password,json=applyNetworkPassword,proto3" json:"apply_network_password,omitempty"`
	LanIpv4                    string                 `protobuf:"bytes,5,opt,name=lan_ipv4,json=lanIpv4,proto3" json:"lan_ipv4,omitempty"`
	LanIpv4SubnetMask          string                 `protobuf:"bytes,6,opt,name=lan_ipv4_subnet_mask,json=lanIpv4SubnetMask,proto3" json:"lan_ipv4_subnet_mask,omitempty"`
	WifiSecurity               WifiConfig_Security    `protobuf:"varint,10,opt,name=wifi_security,json=wifiSecurity,proto3,enum=SpaceX.API.Device.WifiConfig_Security" json:"wifi_security,omitempty"`
	ApplyWifiSecurity          bool                   `protobuf:"varint,1004,opt,name=apply_wifi_security,json=applyWifiSecurity,proto3" json:"apply_wifi_security,omitempty"`
	NetworkName_5Ghz           string                 `protobuf:"bytes,11,opt,name=network_name_5ghz,json=networkName5ghz,proto3" json:"network_name_5ghz,omitempty"`
	ApplyNetworkName_5Ghz      bool                   `protobuf:"varint,1005,opt,name=apply_network_name_5ghz,json=applyNetworkName5ghz,proto3" json:"apply_network_name_5ghz,omitempty"`
	ApplyMacWan                bool                   `protobuf:"varint,1006,opt,name=apply_mac_wan,json=applyMacWan,proto3" json:"apply_mac_wan,omitempty"`
	ApplyMacLan                bool                   `protobuf:"varint,1007,opt,name=apply_mac_lan,json=applyMacLan,proto3" json:"apply_mac_lan,omitempty"`
	MacLan_2Ghz                string                 `protobuf:"bytes,14,opt,name=mac_lan_2ghz,json=macLan2ghz,proto3" json:"mac_lan_2ghz,omitempty"`
	ApplyMacLan_2Ghz           bool                   `protobuf:"varint,1008,opt,name=apply_mac_lan_2ghz,json=applyMacLan2ghz,proto3" json:"apply_mac_lan_2ghz,omitempty"`
	MacLan_5Ghz                string                 `protobuf:"bytes,15,opt,name=mac_lan_5ghz,json=macLan5ghz,proto3" json:"mac_lan_5ghz,omitempty"`
	ApplyMacLan_5Ghz           bool                   `protobuf:"varint,1009,opt,name=apply_mac_lan_5ghz,json=applyMacLan5ghz,proto3" json:"apply_mac_lan_5ghz,omitempty"`
	Disable_2Ghz               bool                   `protobuf:"varint,17,opt,name=disable_2ghz,json=disable2ghz,proto3" json:"disable_2ghz,omitempty"`
	ApplyDisable_2Ghz          bool                   `protobuf:"varint,1011,opt,name=apply_disable_2ghz,json=applyDisable2ghz,proto3" json:"apply_disable_2ghz,omitempty"`
	Disable_5Ghz               bool                   `protobuf:"varint,18,opt,name=disable_5ghz,json=disable5ghz,proto3" json:"disable_5ghz,omitempty"`
	ApplyDisable_5Ghz          bool                   `protobuf:"varint,1012,opt,name=apply_disable_5ghz,json=applyDisable5ghz,proto3" json:"apply_disable_5ghz,omitempty"`
	// Deprecated: Do not use.
	FactoryResetTicker uint32 `protobuf:"varint,8,opt,name=factory_reset_ticker,json=factoryResetTicker,proto3" json:"factory_reset_ticker,omitempty"`
	// Deprecated: Do not use.
	MeshUpstreams []string `protobuf:"bytes,25,rep,name=mesh_upstreams,json=meshUpstreams,proto3" json:"mesh_upstreams,omitempty"`
	// Deprecated: Do not use.
	ApplyMeshUpstreams bool `protobuf:"varint,1051,opt,name=apply_mesh_upstreams,json=applyMeshUpstreams,proto3" json:"apply_mesh_upstreams,omitempty"`
	// Deprecated: Do not use.
	TrustedPeers []string `protobuf:"bytes,27,rep,name=trusted_peers,json=trustedPeers,proto3" json:"trusted_peers,omitempty"`
	// Deprecated: Do not use.
	ApplyTrustedPeers bool `protobuf:"varint,1052,opt,name=apply_trusted_peers,json=applyTrustedPeers,proto3" json:"apply_trusted_peers,omitempty"`
	// Deprecated: Do not use.
	DistrustedPeers []string `protobuf:"bytes,28,rep,name=distrusted_peers,json=distrustedPeers,proto3" json:"distrusted_peers,omitempty"`
	// Deprecated: Do not use.
	ApplyDistrustedPeers bool  `protobuf:"varint,1053,opt,name=apply_distrusted_peers,json=applyDistrustedPeers,proto3" json:"apply_distrusted_peers,omitempty"`
	EnableRemoteSsh      bool  `protobuf:"varint,34,opt,name=enable_remote_ssh,json=enableRemoteSsh,proto3" json:"enable_remote_ssh,omitempty"`
	ApplyEnableRemoteSsh bool  `protobuf:"varint,1057,opt,name=apply_enable_remote_ssh,json=applyEnableRemoteSsh,proto3" json:"apply_enable_remote_ssh,omitempty"`
	LastRemoteSshAccess  int64 `protobuf:"varint,35,opt,name=last_remote_ssh_access,json=lastRemoteSshAccess,proto3" json:"last_remote_ssh_access,omitempty"`
}

func (x *WifiConfig) Reset() {
	*x = WifiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig) ProtoMessage() {}

func (x *WifiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig.ProtoReflect.Descriptor instead.
func (*WifiConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1}
}

func (x *WifiConfig) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *WifiConfig) GetSetupComplete() bool {
	if x != nil {
		return x.SetupComplete
	}
	return false
}

func (x *WifiConfig) GetApplySetupComplete() bool {
	if x != nil {
		return x.ApplySetupComplete
	}
	return false
}

func (x *WifiConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WifiConfig) GetMacWan() string {
	if x != nil {
		return x.MacWan
	}
	return ""
}

func (x *WifiConfig) GetMacLan() string {
	if x != nil {
		return x.MacLan
	}
	return ""
}

func (x *WifiConfig) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *WifiConfig) GetChannel_2Ghz() uint32 {
	if x != nil {
		return x.Channel_2Ghz
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_2Ghz() bool {
	if x != nil {
		return x.ApplyChannel_2Ghz
	}
	return false
}

func (x *WifiConfig) GetChannel_5Ghz() uint32 {
	if x != nil {
		return x.Channel_5Ghz
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_5Ghz() bool {
	if x != nil {
		return x.ApplyChannel_5Ghz
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetMeshAuths() map[string]MeshAuth {
	if x != nil {
		return x.MeshAuths
	}
	return nil
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyMeshAuths() bool {
	if x != nil {
		return x.ApplyMeshAuths
	}
	return false
}

func (x *WifiConfig) GetMeshConfigs() map[string]*MeshConfig {
	if x != nil {
		return x.MeshConfigs
	}
	return nil
}

func (x *WifiConfig) GetApplyMeshConfigs() bool {
	if x != nil {
		return x.ApplyMeshConfigs
	}
	return false
}

func (x *WifiConfig) GetDynamicKeys() []*PublicKey {
	if x != nil {
		return x.DynamicKeys
	}
	return nil
}

func (x *WifiConfig) GetIsRepeater() bool {
	if x != nil {
		return x.IsRepeater
	}
	return false
}

func (x *WifiConfig) GetApplyIsRepeater() bool {
	if x != nil {
		return x.ApplyIsRepeater
	}
	return false
}

func (x *WifiConfig) GetExperimentsEnableMesh() bool {
	if x != nil {
		return x.ExperimentsEnableMesh
	}
	return false
}

func (x *WifiConfig) GetApplyExperimentsEnableMesh() bool {
	if x != nil {
		return x.ApplyExperimentsEnableMesh
	}
	return false
}

func (x *WifiConfig) GetBootCount() int32 {
	if x != nil {
		return x.BootCount
	}
	return 0
}

func (x *WifiConfig) GetDisableHidden() bool {
	if x != nil {
		return x.DisableHidden
	}
	return false
}

func (x *WifiConfig) GetApplyDisableHidden() bool {
	if x != nil {
		return x.ApplyDisableHidden
	}
	return false
}

func (x *WifiConfig) GetHtBandwidth() string {
	if x != nil {
		return x.HtBandwidth
	}
	return ""
}

func (x *WifiConfig) GetVhtBandwidth() string {
	if x != nil {
		return x.VhtBandwidth
	}
	return ""
}

func (x *WifiConfig) GetWirelessMode_2Ghz() string {
	if x != nil {
		return x.WirelessMode_2Ghz
	}
	return ""
}

func (x *WifiConfig) GetWirelessMode_5Ghz() string {
	if x != nil {
		return x.WirelessMode_5Ghz
	}
	return ""
}

func (x *WifiConfig) GetBoot() *BootInfo {
	if x != nil {
		return x.Boot
	}
	return nil
}

func (x *WifiConfig) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *WifiConfig) GetApplyNameservers() bool {
	if x != nil {
		return x.ApplyNameservers
	}
	return false
}

func (x *WifiConfig) GetBypassMode() bool {
	if x != nil {
		return x.BypassMode
	}
	return false
}

func (x *WifiConfig) GetApplyBypassMode() bool {
	if x != nil {
		return x.ApplyBypassMode
	}
	return false
}

func (x *WifiConfig) GetNetworks() []*WifiConfig_Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *WifiConfig) GetApplyNetworks() bool {
	if x != nil {
		return x.ApplyNetworks
	}
	return false
}

func (x *WifiConfig) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *WifiConfig) GetApplyNetworkName() bool {
	if x != nil {
		return x.ApplyNetworkName
	}
	return false
}

func (x *WifiConfig) GetNetworkPassword() string {
	if x != nil {
		return x.NetworkPassword
	}
	return ""
}

func (x *WifiConfig) GetApplyNetworkPassword() bool {
	if x != nil {
		return x.ApplyNetworkPassword
	}
	return false
}

func (x *WifiConfig) GetLanIpv4() string {
	if x != nil {
		return x.LanIpv4
	}
	return ""
}

func (x *WifiConfig) GetLanIpv4SubnetMask() string {
	if x != nil {
		return x.LanIpv4SubnetMask
	}
	return ""
}

func (x *WifiConfig) GetWifiSecurity() WifiConfig_Security {
	if x != nil {
		return x.WifiSecurity
	}
	return WifiConfig_UNKNOWN
}

func (x *WifiConfig) GetApplyWifiSecurity() bool {
	if x != nil {
		return x.ApplyWifiSecurity
	}
	return false
}

func (x *WifiConfig) GetNetworkName_5Ghz() string {
	if x != nil {
		return x.NetworkName_5Ghz
	}
	return ""
}

func (x *WifiConfig) GetApplyNetworkName_5Ghz() bool {
	if x != nil {
		return x.ApplyNetworkName_5Ghz
	}
	return false
}

func (x *WifiConfig) GetApplyMacWan() bool {
	if x != nil {
		return x.ApplyMacWan
	}
	return false
}

func (x *WifiConfig) GetApplyMacLan() bool {
	if x != nil {
		return x.ApplyMacLan
	}
	return false
}

func (x *WifiConfig) GetMacLan_2Ghz() string {
	if x != nil {
		return x.MacLan_2Ghz
	}
	return ""
}

func (x *WifiConfig) GetApplyMacLan_2Ghz() bool {
	if x != nil {
		return x.ApplyMacLan_2Ghz
	}
	return false
}

func (x *WifiConfig) GetMacLan_5Ghz() string {
	if x != nil {
		return x.MacLan_5Ghz
	}
	return ""
}

func (x *WifiConfig) GetApplyMacLan_5Ghz() bool {
	if x != nil {
		return x.ApplyMacLan_5Ghz
	}
	return false
}

func (x *WifiConfig) GetDisable_2Ghz() bool {
	if x != nil {
		return x.Disable_2Ghz
	}
	return false
}

func (x *WifiConfig) GetApplyDisable_2Ghz() bool {
	if x != nil {
		return x.ApplyDisable_2Ghz
	}
	return false
}

func (x *WifiConfig) GetDisable_5Ghz() bool {
	if x != nil {
		return x.Disable_5Ghz
	}
	return false
}

func (x *WifiConfig) GetApplyDisable_5Ghz() bool {
	if x != nil {
		return x.ApplyDisable_5Ghz
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetFactoryResetTicker() uint32 {
	if x != nil {
		return x.FactoryResetTicker
	}
	return 0
}

// Deprecated: Do not use.
func (x *WifiConfig) GetMeshUpstreams() []string {
	if x != nil {
		return x.MeshUpstreams
	}
	return nil
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyMeshUpstreams() bool {
	if x != nil {
		return x.ApplyMeshUpstreams
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetTrustedPeers() []string {
	if x != nil {
		return x.TrustedPeers
	}
	return nil
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyTrustedPeers() bool {
	if x != nil {
		return x.ApplyTrustedPeers
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetDistrustedPeers() []string {
	if x != nil {
		return x.DistrustedPeers
	}
	return nil
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyDistrustedPeers() bool {
	if x != nil {
		return x.ApplyDistrustedPeers
	}
	return false
}

func (x *WifiConfig) GetEnableRemoteSsh() bool {
	if x != nil {
		return x.EnableRemoteSsh
	}
	return false
}

func (x *WifiConfig) GetApplyEnableRemoteSsh() bool {
	if x != nil {
		return x.ApplyEnableRemoteSsh
	}
	return false
}

func (x *WifiConfig) GetLastRemoteSshAccess() int64 {
	if x != nil {
		return x.LastRemoteSshAccess
	}
	return 0
}

type AuthOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthOpen) Reset() {
	*x = AuthOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOpen) ProtoMessage() {}

func (x *AuthOpen) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOpen.ProtoReflect.Descriptor instead.
func (*AuthOpen) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{2}
}

type AuthWpa2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthWpa2) Reset() {
	*x = AuthWpa2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthWpa2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa2) ProtoMessage() {}

func (x *AuthWpa2) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa2.ProtoReflect.Descriptor instead.
func (*AuthWpa2) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{3}
}

func (x *AuthWpa2) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthWpa3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthWpa3) Reset() {
	*x = AuthWpa3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthWpa3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa3) ProtoMessage() {}

func (x *AuthWpa3) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa3.ProtoReflect.Descriptor instead.
func (*AuthWpa3) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4}
}

func (x *AuthWpa3) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthWpa2Wpa3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthWpa2Wpa3) Reset() {
	*x = AuthWpa2Wpa3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthWpa2Wpa3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa2Wpa3) ProtoMessage() {}

func (x *AuthWpa2Wpa3) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa2Wpa3.ProtoReflect.Descriptor instead.
func (*AuthWpa2Wpa3) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{5}
}

func (x *AuthWpa2Wpa3) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthRadius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *AuthRadius) Reset() {
	*x = AuthRadius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRadius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRadius) ProtoMessage() {}

func (x *AuthRadius) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRadius.ProtoReflect.Descriptor instead.
func (*AuthRadius) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{6}
}

func (x *AuthRadius) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

type WifiConfig_BasicServiceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1000,opt,name=uid,proto3" json:"uid,omitempty"`
	ApplyCreate bool   `protobuf:"varint,1001,opt,name=apply_create,json=applyCreate,proto3" json:"apply_create,omitempty"`
	ApplyDelete bool   `protobuf:"varint,1002,opt,name=apply_delete,json=applyDelete,proto3" json:"apply_delete,omitempty"`
	Bssid       string `protobuf:"bytes,1003,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Ssid        string `protobuf:"bytes,1005,opt,name=ssid,proto3" json:"ssid,omitempty"`
	ApplySsid   bool   `protobuf:"varint,1006,opt,name=apply_ssid,json=applySsid,proto3" json:"apply_ssid,omitempty"`
	// Types that are assignable to Auth:
	//	*WifiConfig_BasicServiceSet_AuthOpen
	//	*WifiConfig_BasicServiceSet_AuthWpa2
	//	*WifiConfig_BasicServiceSet_AuthWpa3
	//	*WifiConfig_BasicServiceSet_AuthWpa2Wpa3
	//	*WifiConfig_BasicServiceSet_AuthRadius
	Auth         isWifiConfig_BasicServiceSet_Auth `protobuf_oneof:"auth"`
	ApplyAuth    bool                              `protobuf:"varint,2000,opt,name=apply_auth,json=applyAuth,proto3" json:"apply_auth,omitempty"`
	Band         WifiConfig_Band                   `protobuf:"varint,1011,opt,name=band,proto3,enum=SpaceX.API.Device.WifiConfig_Band" json:"band,omitempty"`
	ApplyBand    bool                              `protobuf:"varint,1012,opt,name=apply_band,json=applyBand,proto3" json:"apply_band,omitempty"`
	Disable      bool                              `protobuf:"varint,1013,opt,name=disable,proto3" json:"disable,omitempty"`
	ApplyDisable bool                              `protobuf:"varint,1014,opt,name=apply_disable,json=applyDisable,proto3" json:"apply_disable,omitempty"`
	Hidden       bool                              `protobuf:"varint,1015,opt,name=hidden,proto3" json:"hidden,omitempty"`
	ApplyHidden  bool                              `protobuf:"varint,1016,opt,name=apply_hidden,json=applyHidden,proto3" json:"apply_hidden,omitempty"`
}

func (x *WifiConfig_BasicServiceSet) Reset() {
	*x = WifiConfig_BasicServiceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiConfig_BasicServiceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_BasicServiceSet) ProtoMessage() {}

func (x *WifiConfig_BasicServiceSet) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_BasicServiceSet.ProtoReflect.Descriptor instead.
func (*WifiConfig_BasicServiceSet) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 2}
}

func (x *WifiConfig_BasicServiceSet) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WifiConfig_BasicServiceSet) GetApplyCreate() bool {
	if x != nil {
		return x.ApplyCreate
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetApplyDelete() bool {
	if x != nil {
		return x.ApplyDelete
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *WifiConfig_BasicServiceSet) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiConfig_BasicServiceSet) GetApplySsid() bool {
	if x != nil {
		return x.ApplySsid
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetAuth() isWifiConfig_BasicServiceSet_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthOpen() *AuthOpen {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthOpen); ok {
		return x.AuthOpen
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa2() *AuthWpa2 {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa2); ok {
		return x.AuthWpa2
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa3() *AuthWpa3 {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa3); ok {
		return x.AuthWpa3
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa2Wpa3() *AuthWpa2Wpa3 {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3); ok {
		return x.AuthWpa2Wpa3
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthRadius() *AuthRadius {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthRadius); ok {
		return x.AuthRadius
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetApplyAuth() bool {
	if x != nil {
		return x.ApplyAuth
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetBand() WifiConfig_Band {
	if x != nil {
		return x.Band
	}
	return WifiConfig_RF_UNKNOWN
}

func (x *WifiConfig_BasicServiceSet) GetApplyBand() bool {
	if x != nil {
		return x.ApplyBand
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetApplyDisable() bool {
	if x != nil {
		return x.ApplyDisable
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetApplyHidden() bool {
	if x != nil {
		return x.ApplyHidden
	}
	return false
}

type isWifiConfig_BasicServiceSet_Auth interface {
	isWifiConfig_BasicServiceSet_Auth()
}

type WifiConfig_BasicServiceSet_AuthOpen struct {
	AuthOpen *AuthOpen `protobuf:"bytes,2001,opt,name=auth_open,json=authOpen,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2 struct {
	AuthWpa2 *AuthWpa2 `protobuf:"bytes,2002,opt,name=auth_wpa2,json=authWpa2,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa3 struct {
	AuthWpa3 *AuthWpa3 `protobuf:"bytes,2003,opt,name=auth_wpa3,json=authWpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2Wpa3 struct {
	AuthWpa2Wpa3 *AuthWpa2Wpa3 `protobuf:"bytes,2004,opt,name=auth_wpa2_wpa3,json=authWpa2Wpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthRadius struct {
	AuthRadius *AuthRadius `protobuf:"bytes,2005,opt,name=auth_radius,json=authRadius,proto3,oneof"`
}

func (*WifiConfig_BasicServiceSet_AuthOpen) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2Wpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthRadius) isWifiConfig_BasicServiceSet_Auth() {}

type WifiConfig_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              string                        `protobuf:"bytes,1000,opt,name=uid,proto3" json:"uid,omitempty"`
	ApplyCreate      bool                          `protobuf:"varint,1001,opt,name=apply_create,json=applyCreate,proto3" json:"apply_create,omitempty"`
	ApplyDelete      bool                          `protobuf:"varint,1002,opt,name=apply_delete,json=applyDelete,proto3" json:"apply_delete,omitempty"`
	Ipv4             string                        `protobuf:"bytes,1003,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv4SubnetMask   string                        `protobuf:"bytes,1005,opt,name=ipv4_subnet_mask,json=ipv4SubnetMask,proto3" json:"ipv4_subnet_mask,omitempty"`
	BasicServiceSets []*WifiConfig_BasicServiceSet `protobuf:"bytes,1007,rep,name=basic_service_sets,json=basicServiceSets,proto3" json:"basic_service_sets,omitempty"`
}

func (x *WifiConfig_Network) Reset() {
	*x = WifiConfig_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiConfig_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_Network) ProtoMessage() {}

func (x *WifiConfig_Network) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_Network.ProtoReflect.Descriptor instead.
func (*WifiConfig_Network) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 3}
}

func (x *WifiConfig_Network) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WifiConfig_Network) GetApplyCreate() bool {
	if x != nil {
		return x.ApplyCreate
	}
	return false
}

func (x *WifiConfig_Network) GetApplyDelete() bool {
	if x != nil {
		return x.ApplyDelete
	}
	return false
}

func (x *WifiConfig_Network) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *WifiConfig_Network) GetIpv4SubnetMask() string {
	if x != nil {
		return x.Ipv4SubnetMask
	}
	return ""
}

func (x *WifiConfig_Network) GetBasicServiceSets() []*WifiConfig_BasicServiceSet {
	if x != nil {
		return x.BasicServiceSets
	}
	return nil
}

var File_spacex_api_device_wifi_config_proto protoreflect.FileDescriptor

var file_spacex_api_device_wifi_config_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x4d, 0x65,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xaf, 0x21, 0x0a, 0x0a, 0x57,
	0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x5f, 0x77, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x57, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63,
	0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x4c,
	0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32, 0x67,
	0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32, 0x67, 0x68,
	0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x35, 0x67, 0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x35,
	0x67, 0x68, 0x7a, 0x12, 0x4f, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x68, 0x41,
	0x75, 0x74, 0x68, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65,
	0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x68, 0x41, 0x75,
	0x74, 0x68, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x89, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x87, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x73, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x1d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x91, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0xf7,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x74, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x76, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xd2,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x68, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x67,
	0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x35, 0x67, 0x68,
	0x7a, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62,
	0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x9e, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x62, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x9f, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x42, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0xcc, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x12, 0x2f, 0x0a, 0x14,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x49,
	0x70, 0x76, 0x34, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x4b, 0x0a,
	0x0d, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x77, 0x69,
	0x66, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x57,
	0x69, 0x66, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x77, 0x61, 0x6e,
	0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x61,
	0x63, 0x57, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x4d, 0x61, 0x63, 0x4c, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x4c, 0x61, 0x6e, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x32, 0x67, 0x68,
	0x7a, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d,
	0x61, 0x63, 0x4c, 0x61, 0x6e, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x4c, 0x61, 0x6e, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d,
	0x61, 0x63, 0x4c, 0x61, 0x6e, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x32, 0x67,
	0x68, 0x7a, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x34, 0x0a,
	0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0d, 0x6d, 0x65, 0x73, 0x68, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x35,
	0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x9b, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x68, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x33,
	0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x9c, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x9d, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x73, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x73, 0x68, 0x18, 0xa1, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x73,
	0x68, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x73, 0x68,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x59, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x68, 0x41, 0x75,
	0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5d, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xfb, 0x05, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0xea, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0xed,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x64, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x73, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x77, 0x70, 0x61, 0x32, 0x18, 0xd2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x57, 0x70, 0x61, 0x32, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x77, 0x70,
	0x61, 0x33, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x57, 0x70, 0x61, 0x33, 0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x57, 0x70,
	0x61, 0x33, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x77, 0x70, 0x61, 0x32, 0x5f,
	0x77, 0x70, 0x61, 0x33, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x57, 0x70, 0x61, 0x33, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x57, 0x70, 0x61, 0x33, 0x12, 0x41, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0xd5, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0xd0, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x37, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61,
	0x6e, 0x64, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x82,
	0x02, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x11, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0xeb, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0xed,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x5c, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xef, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x57, 0x50, 0x41, 0x32, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x50, 0x41, 0x33, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x57, 0x50, 0x41, 0x32, 0x57, 0x50, 0x41, 0x33, 0x10, 0x03, 0x22, 0x30,
	0x0a, 0x04, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x46, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x46, 0x5f, 0x32, 0x47, 0x48,
	0x5a, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x46, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x20, 0x10, 0x21, 0x4a, 0x06, 0x08, 0xeb,
	0x07, 0x10, 0xec, 0x07, 0x4a, 0x06, 0x08, 0xa0, 0x08, 0x10, 0xa1, 0x08, 0x22, 0x0a, 0x0a, 0x08,
	0x41, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x26, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68,
	0x57, 0x70, 0x61, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x26, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x33, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x2a, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68,
	0x57, 0x70, 0x61, 0x32, 0x57, 0x70, 0x61, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x24, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0x64, 0x0a, 0x08, 0x4d, 0x65,
	0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x52,
	0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x48, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x42, 0x17, 0x5a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_spacex_api_device_wifi_config_proto_rawDescOnce sync.Once
	file_spacex_api_device_wifi_config_proto_rawDescData = file_spacex_api_device_wifi_config_proto_rawDesc
)

func file_spacex_api_device_wifi_config_proto_rawDescGZIP() []byte {
	file_spacex_api_device_wifi_config_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_wifi_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacex_api_device_wifi_config_proto_rawDescData)
	})
	return file_spacex_api_device_wifi_config_proto_rawDescData
}

var file_spacex_api_device_wifi_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_spacex_api_device_wifi_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_spacex_api_device_wifi_config_proto_goTypes = []interface{}{
	(MeshAuth)(0),                      // 0: SpaceX.API.Device.MeshAuth
	(WifiConfig_Security)(0),           // 1: SpaceX.API.Device.WifiConfig.Security
	(WifiConfig_Band)(0),               // 2: SpaceX.API.Device.WifiConfig.Band
	(*MeshConfig)(nil),                 // 3: SpaceX.API.Device.MeshConfig
	(*WifiConfig)(nil),                 // 4: SpaceX.API.Device.WifiConfig
	(*AuthOpen)(nil),                   // 5: SpaceX.API.Device.AuthOpen
	(*AuthWpa2)(nil),                   // 6: SpaceX.API.Device.AuthWpa2
	(*AuthWpa3)(nil),                   // 7: SpaceX.API.Device.AuthWpa3
	(*AuthWpa2Wpa3)(nil),               // 8: SpaceX.API.Device.AuthWpa2Wpa3
	(*AuthRadius)(nil),                 // 9: SpaceX.API.Device.AuthRadius
	nil,                                // 10: SpaceX.API.Device.WifiConfig.MeshAuthsEntry
	nil,                                // 11: SpaceX.API.Device.WifiConfig.MeshConfigsEntry
	(*WifiConfig_BasicServiceSet)(nil), // 12: SpaceX.API.Device.WifiConfig.BasicServiceSet
	(*WifiConfig_Network)(nil),         // 13: SpaceX.API.Device.WifiConfig.Network
	(*PublicKey)(nil),                  // 14: SpaceX.API.Device.PublicKey
	(*BootInfo)(nil),                   // 15: SpaceX.API.Device.BootInfo
}
var file_spacex_api_device_wifi_config_proto_depIdxs = []int32{
	0,  // 0: SpaceX.API.Device.MeshConfig.auth:type_name -> SpaceX.API.Device.MeshAuth
	10, // 1: SpaceX.API.Device.WifiConfig.mesh_auths:type_name -> SpaceX.API.Device.WifiConfig.MeshAuthsEntry
	11, // 2: SpaceX.API.Device.WifiConfig.mesh_configs:type_name -> SpaceX.API.Device.WifiConfig.MeshConfigsEntry
	14, // 3: SpaceX.API.Device.WifiConfig.dynamic_keys:type_name -> SpaceX.API.Device.PublicKey
	15, // 4: SpaceX.API.Device.WifiConfig.boot:type_name -> SpaceX.API.Device.BootInfo
	13, // 5: SpaceX.API.Device.WifiConfig.networks:type_name -> SpaceX.API.Device.WifiConfig.Network
	1,  // 6: SpaceX.API.Device.WifiConfig.wifi_security:type_name -> SpaceX.API.Device.WifiConfig.Security
	0,  // 7: SpaceX.API.Device.WifiConfig.MeshAuthsEntry.value:type_name -> SpaceX.API.Device.MeshAuth
	3,  // 8: SpaceX.API.Device.WifiConfig.MeshConfigsEntry.value:type_name -> SpaceX.API.Device.MeshConfig
	5,  // 9: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_open:type_name -> SpaceX.API.Device.AuthOpen
	6,  // 10: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa2:type_name -> SpaceX.API.Device.AuthWpa2
	7,  // 11: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa3:type_name -> SpaceX.API.Device.AuthWpa3
	8,  // 12: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa2_wpa3:type_name -> SpaceX.API.Device.AuthWpa2Wpa3
	9,  // 13: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_radius:type_name -> SpaceX.API.Device.AuthRadius
	2,  // 14: SpaceX.API.Device.WifiConfig.BasicServiceSet.band:type_name -> SpaceX.API.Device.WifiConfig.Band
	12, // 15: SpaceX.API.Device.WifiConfig.Network.basic_service_sets:type_name -> SpaceX.API.Device.WifiConfig.BasicServiceSet
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_spacex_api_device_wifi_config_proto_init() }
func file_spacex_api_device_wifi_config_proto_init() {
	if File_spacex_api_device_wifi_config_proto != nil {
		return
	}
	file_spacex_api_device_command_proto_init()
	file_spacex_api_device_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spacex_api_device_wifi_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthWpa2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthWpa3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthWpa2Wpa3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRadius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiConfig_BasicServiceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiConfig_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spacex_api_device_wifi_config_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*WifiConfig_BasicServiceSet_AuthOpen)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthRadius)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacex_api_device_wifi_config_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spacex_api_device_wifi_config_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_wifi_config_proto_depIdxs,
		EnumInfos:         file_spacex_api_device_wifi_config_proto_enumTypes,
		MessageInfos:      file_spacex_api_device_wifi_config_proto_msgTypes,
	}.Build()
	File_spacex_api_device_wifi_config_proto = out.File
	file_spacex_api_device_wifi_config_proto_rawDesc = nil
	file_spacex_api_device_wifi_config_proto_goTypes = nil
	file_spacex_api_device_wifi_config_proto_depIdxs = nil
}
